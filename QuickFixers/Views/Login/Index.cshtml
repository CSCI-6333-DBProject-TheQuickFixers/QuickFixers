@model QuickFixers.Models.HomeViewModel

@*The model is the object we use to save are fields put into the form.
    Each hold taghelpers that are short hand notation for html element,inputs,buttons.
    Class hold css and bootstrap stylings.*@

<h2>Login</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            @Html.Label("Email Address", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", autofocus = true } })
            </div>
        </div>
        <div class="form-group">
            @Html.ValidationMessageFor(model => model.UserPassword, "", new { @class = "text-danger" })
            @Html.Label("Password", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.UserPassword, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ValidationSummary(true, "Incorrect Login", new { @class = "text-danger" })
                <input type="submit" value="Login" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
}